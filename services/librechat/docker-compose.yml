services:

  api:
    image: ghcr.io/danny-avila/librechat-dev-api:latest
    environment:
      - HOST=0.0.0.0
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongodb:27017/LibreChat
      - MEILI_HOST=http://meilisearch:7700
      - RAG_PORT=${RAG_PORT:-8000}
      - RAG_API_URL=http://rag_api:${RAG_PORT:-8000}
    # ports:
    #   - 3080:3080
    depends_on:
      - mongodb
      - rag_api
    env_file:
      - .env
    volumes:
      - type: bind
        source: ./librechat.yaml
        target: /app/librechat.yaml
      - ./images:/app/client/public/images
      - ./uploads:/app/uploads
      - ./logs:/app/api/logs
    networks:
      - proxy
      - librechat_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.librechat.rule=Host(`librechat.local.briangebel.com`)"
        - "traefik.http.routers.librechat.entrypoints=websecure"
        - "traefik.http.services.librechat.loadbalancer.server.port=3080"
        - "traefik.http.routers.librechat.service=librechat"
        - "traefik.http.routers.librechat.tls.certresolver=leresolver"

  mongodb:
    # ports:  # Uncomment this to access mongodb from outside docker, not safe in deployment
    #   - 27018:27017
    image: mongo
    command: mongod --noauth
    volumes:
    - ./data-node:/data/db
    networks:
      - librechat_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

  meilisearch:
    image: getmeili/meilisearch:v1.12.3
    # ports: # Uncomment this to access meilisearch from outside docker
    #   - 7700:7700 # if exposing these ports, make sure your master key is not the default value
    env_file:
      - .env
    environment:
      - MEILI_HOST=http://meilisearch:7700
      - MEILI_NO_ANALYTICS=true
    volumes:
      - ./meili_data_v1.12:/meili_data
    networks:
      - librechat_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

  vectordb:
    image: ankane/pgvector:latest
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    volumes:
      - pgdata2:/var/lib/postgresql/data
    networks:
      - librechat_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

  
  rag_api:
    image: ghcr.io/danny-avila/librechat-rag-api-dev-lite:latest
    environment:
      - DB_HOST=vectordb
      - RAG_PORT=${RAG_PORT:-8000}
    depends_on:
      - vectordb
    env_file:
      - .env
    networks:
      - librechat_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

networks:
  proxy:
    external: true
  librechat_network:
    name: librechat_network
    driver: overlay
    attachable: true

volumes:
  pgdata2:
